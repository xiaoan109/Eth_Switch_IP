//     Copyright (c) 2024 SMIC             
//     Filename:      S55NLLGDPH_X512Y8D12_BW.mbist
//     IP code:       S55NLLGDPH
//     Version:       1.3.a
//     CreateDate:    May 18, 2024        
                    
//    Mentor Mbist for General Dual-Port SRAM
//    SMIC 55nm LL Logic Process

//    Configuration: -instname S55NLLGDPH_X512Y8D12_BW -rows 512 -bits 12 -mux 8 
//    Redundancy: Off
//    Bit-Write: On

// DISCLAIMER                                                                      //
//                                                                                 //  
//   SMIC hereby provides the quality information to you but makes no claims,      //
// promises or guarantees about the accuracy, completeness, or adequacy of the     //
// information herein. The information contained herein is provided on an "AS IS"  //
// basis without any warranty, and SMIC assumes no obligation to provide support   //
// of any kind or otherwise maintain the information.                              //  
//   SMIC disclaims any representation that the information does not infringe any  //
// intellectual property rights or proprietary rights of any third parties. SMIC   //
// makes no other warranty, whether express, implied or statutory as to any        //
// matter whatsoever, including but not limited to the accuracy or sufficiency of  //
// any information or the merchantability and fitness for a particular purpose.    //
// Neither SMIC nor any of its representatives shall be liable for any cause of    //
// action incurred to connect to this service.                                     //  
//                                                                                 //
// STATEMENT OF USE AND CONFIDENTIALITY                                            //  
//                                                                                 //  
//   The following/attached material contains confidential and proprietary         //  
// information of SMIC. This material is based upon information which SMIC         //  
// considers reliable, but SMIC neither represents nor warrants that such          //
// information is accurate or complete, and it must not be relied upon as such.    //
// This information was prepared for informational purposes and is for the use     //
// by SMIC's customer only. SMIC reserves the right to make changes in the         //  
// information at any time without notice.                                         //  
//   No part of this information may be reproduced, transmitted, transcribed,      //  
// stored in a retrieval system, or translated into any human or computer          // 
// language, in any form or by any means, electronic, mechanical, magnetic,        //  
// optical, chemical, manual, or otherwise, without the prior written consent of   //
// SMIC. Any unauthorized use or disclosure of this material is strictly           //  
// prohibited and may be unlawful. By accepting this material, the receiving       //  
// party shall be deemed to have acknowledged, accepted, and agreed to be bound    //
// by the foregoing limitations and restrictions. Thank you.                       //  
//                                                                                 //

model S55NLLGDPH_X512Y8D12_BW(QA, CLKA, CENA, WENA, AA, DA,
                                QB, CLKB, CENB, WENB, AB, DB, BWENA, BWENB)
(
   bist_definition (
     clock CLKA high;
     clock CLKB high;
     data_out QA (array = 11:0;);
     data_out QB (array = 11:0;);
     data_in DA (array = 11:0;);
     data_in DB (array = 11:0;);
     address AA (array = 11:0;);
     address AB (array = 11:0;);
     write_enable WENA low;
     write_enable WENB low;
     chip_enable CENA low;
     chip_enable CENB low;
     write_enable   BWENA (array = 11:0;) low;
     write_enable   BWENB (array = 11:0;) low;
     
     

      tech        = "SRAM (55nm)";
      vendor      = SMIC;
      min_address = 0;
      max_address = 4095;
      message      = "Synchronous Dual-Port 4096x12 SRAM";

      top_column  = 8;
      addr_inc    = 8;
      top_word    = 1;

     read_write_port (
         read_cycle (
            change AA;
            assert CENA;
            wait;
            wait;
            expect QA move;
            wait;
         )
         write_cycle (
            change AA;
            change DA;
            assert CENA;
            assert WENA;
            assert BWENA;
            wait;
            wait;
         )
      )

    read_write_port (
         read_cycle (
            change AB;
            assert CENB;
            wait;
            wait;
            expect QB move;
            wait;
         )
         write_cycle (
            change AB;
            change DB;
            assert CENB;
            assert WENB;
            assert BWENB;
            wait;
            wait;
         )
      )

    )
)